package employee.entity;

#if(${table.hasSqlArray})
import java.sql.Array;
#end
#if(${table.hasBigDecimal})
import java.math.BigDecimal;
#end

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
#if(!${table.parentTable})
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
#end

#if(${table.hasImportedKeys} || !${table.exportedKeys.isEmpty()})
import javax.persistence.CascadeType;
import javax.persistence.FetchType;
#end
#if(${table.hasImportedKeys})
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
#end
#if(!${table.exportedKeys.isEmpty()})
import javax.persistence.OneToMany;
import java.util.List;
#end
#if(${table.parentTable} || ${table.hasChildTables})
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
#end
#if(${table.parentTable})
import javax.persistence.PrimaryKeyJoinColumn;
#end
#if(!${table.parentTable})
import java.io.Serializable;
#end
import org.apache.commons.beanutils.BeanUtils;

@Entity
@Table(name="${table.name}")
#if(${table.parentTable})
@PrimaryKeyJoinColumn(name="${table.primaryColumn.name}")
#end
#if(${table.parentTable} || ${table.hasChildTables})
@Inheritance(strategy=InheritanceType.JOINED)
#end
#if(${table.parentTable})
#set(${keyword} = 'extends')
#set(${parentClass} = ${table.parentTable.className})
#end
#if(!${table.parentTable})
#set(${keyword} = 'implements')
#set(${parentClass} = 'Serializable')
#end
public class ${table.className} ${keyword} ${parentClass} {

	private static final long serialVersionUID = 1L;
	
	#foreach(${column} in ${table.columns})
	#if(${column.relationTable} && !${column.primaryKey})
	@JoinColumn(name="${column.name}")
	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private ${column.relationTable.className} ${column.relationPropertyName};			
	#elseif(!${column.relationTable})
	#if(${column.primaryKey})
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	#end
	@Column(name="${column.name}")
	private ${column.propertyType} ${column.propertyName};
	#end
	#end
	#foreach(${relationColumn} in ${table.exportedKeys})
	@OneToMany(mappedBy="${relationColumn.relationPropertyName}", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private List<${relationColumn.table.className}> ${relationColumn.table.propertyName}s;
	#end
	
	@Transient
	private int pageNo = 1;
	@Transient
	private int pageCount;
	@Transient
	private int rowCount = 10;
	@Transient
	private int totalRows;
	
	public ${table.className}() {
	}
	
	public ${table.className}(${table.primaryColumn.propertyType} ${table.primaryColumn.propertyName}) {
		#if(!${table.parentTable})
		this.${table.primaryColumn.propertyName} = ${table.primaryColumn.propertyName};
		#end
		#if(${table.parentTable})
		super(${table.primaryColumn.propertyName});
		#end
	}
	#foreach(${column} in ${table.columns})
	#if(${column.relationTable} && !${column.primaryKey})
	
	public void set${column.relationMethodName}(${column.relationTable.className} ${column.relationPropertyName}) {
		this.${column.relationPropertyName} = ${column.relationPropertyName};
	}

	public ${column.relationTable.className} get${column.relationMethodName}() {
		return ${column.relationPropertyName};
	}
	#elseif(!${column.relationTable})
	
	public void set${column.methodName}(${column.propertyType} ${column.propertyName}) {
		this.${column.propertyName} = ${column.propertyName};
	}

	public ${column.propertyType} get${column.methodName}() {
		return ${column.propertyName};
	}
	#end
	#end
	#foreach(${relationColumn} in ${table.exportedKeys})
	
	public void set${relationColumn.table.className}s(List<${relationColumn.table.className}> ${relationColumn.table.propertyName}s) {
		this.${relationColumn.table.propertyName}s = ${relationColumn.table.propertyName}s;
	}

	public List<${relationColumn.table.className}> get${relationColumn.table.className}s() {
		return ${relationColumn.table.propertyName}s;
	}
	#end
	
	public int getPageNo() {
		return pageNo;
	}
	
	public void setPageNo(int pageNo) {
		this.pageNo = pageNo;
	}
	
	public int getPageCount() {
		pageCount = (int)Math.ceil((double)totalRows/(double)rowCount);
		return pageCount;
	}
	
	public void setPageCount(int pageCount) {
		this.pageCount = pageCount;
	}
	
	public int getRowCount() {
		return rowCount;
	}
	
	public void setRowCount(int rowCount) {
		this.rowCount = rowCount;
	}
	
	public int getTotalRows() {
		return totalRows;
	}
	
	public void setTotalRows(int totalRows) {
		this.totalRows = totalRows;
	}
	
	public int getOffset() {
		return (pageNo-1) * rowCount;
	}

	public String toString() {

		try{
			return BeanUtils.describe(this).toString();
		}catch(Exception e) {
			return null;
		}
	}
	
	public boolean equals(Object object) {

 		if(object != null && object instanceof ${table.className}){

			${table.className} ${table.propertyName} = (${table.className}) object;

			if(${table.propertyName}.getId() != null && getId() != null){
				return ${table.propertyName}.getId() == getId();
			}else if(${table.propertyName}.getId() == null && getId() == null){
				return true;
			}else{
				return false;
			}

		} else {
			return false;
		}
	}

	public int hashCode() {
		return getId() != null ? getId() : 0;
	}
}